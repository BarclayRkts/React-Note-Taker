{"version":3,"sources":["Note.js","NewNoteForm.js","Data.js","Display.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","state","curTime","Date","toLocaleString","note","handleRemove","bind","toggleForm","handleUpdate","handleChange","this","removeNote","id","setState","isEditing","evt","preventDefault","console","log","updateNote","target","name","value","result","onSubmit","onChange","handleSubmit","className","content","onClick","Component","NewNoteForm","createNote","uuidv4","data","Display","notes","Data","visible","create","handleClick","currentDate","remove","update","newNote","filter","separator","newDate","date","getDate","month","getMonth","year","getFullYear","updatedNote","updatedNotes","map","index","time","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9c5036e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Note.css'\r\n\r\nclass Note extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            curTime : new Date().toLocaleString(),\r\n            note: ''\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleRemove(){\r\n        this.props.removeNote(this.props.id)\r\n    }\r\n    toggleForm(){\r\n        this.setState({\r\n            isEditing: !this.state.isEditing\r\n        })\r\n    }\r\n    handleUpdate(evt){\r\n        evt.preventDefault();\r\n        // this.props.updateRecipe(this.props.id, this.state.ingridents)\r\n        console.log( `this is the state in handleUpdate ${this.state.note} `)\r\n        this.props.updateNote(this.props.id, this.state);   \r\n        \r\n        this.setState({\r\n            isEditing: false\r\n        })\r\n    }\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n    }\r\n    render(){\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result = (\r\n                <form onSubmit={this.handleUpdate}>\r\n                <textarea\r\n                    onChange={this.handleChange}\r\n                    name='note'\r\n                    value={this.state.note}\r\n                />\r\n                <button>Save</button>\r\n                </form>\r\n            )\r\n        }else{\r\n            result = (\r\n                <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                </form>\r\n            </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className='container'>\r\n                <div className='content'>{this.props.content}</div>\r\n                {result}\r\n                <div className='timeDiv'>\r\n                    <span className='time'>{this.state.curTime}</span>\r\n                </div>\r\n                \r\n                <button className='deleteBtn' onClick={this.handleRemove}>Delete</button><button onClick={this.toggleForm} className='editBtn'>Edit</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Note;\r\n","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './NewNoteForm.css';\r\n\r\nexport default class NewNoteForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            note: 'This is a new sticky note'\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name] : evt.target.value\r\n        })\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.createNote({...this.state, id: uuidv4()});\r\n        this.setState({note: ''})\r\n    }\r\n    toggleForm(){\r\n        this.setState({\r\n            isEditing: !this.state.isEditing\r\n        })\r\n    }\r\n    render() {\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result = (\r\n                <form onSubmit={this.handleUpdate}>\r\n                <textarea\r\n                    onChange={this.handleChange}\r\n                    name='note'\r\n                    value={this.state.note}\r\n                />\r\n                <button>Save</button>\r\n                </form>\r\n            )\r\n        }else{\r\n            result = (\r\n                <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {/*<textarea\r\n                    onChange={this.handleChange}\r\n                    name='note'\r\n                    value={this.state.note}\r\n                    />*/}\r\n                    <button>Add Note</button>\r\n                </form>\r\n            </div>\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}","import { v4 as uuidv4 } from 'uuid';\r\n\r\nlet data =   [\r\n    {\r\n        note: \"This is a sticky note app that is good for taking small notes\",\r\n        id: uuidv4()\r\n    },\r\n    {\r\n        note: \"I have to write a book report tommorow after school\",\r\n        id: uuidv4()\r\n    }\r\n]\r\nexport default data;","import React, { Component } from 'react'\r\nimport Note from './Note';\r\nimport NewNoteForm from './NewNoteForm';\r\nimport Data from './Data';\r\nimport './Display.css';\r\n\r\nexport default class Display extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            notes: [Data[0],Data[1]],\r\n            visible: true\r\n        }\r\n        this.create = this.create.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.currentDate = this.currentDate.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        // this.randomBetween = this.randomBetween.bind(this);\r\n    }\r\n    create(newNote){\r\n        this.setState({\r\n            notes: [...this.state.notes, newNote]\r\n        })\r\n    }\r\n    handleClick(){\r\n        this.setState({\r\n            visible: !this.state.visible\r\n        })\r\n    }\r\n    remove(id){\r\n        console.log(id)\r\n        this.setState({\r\n            notes: this.state.notes.filter(note => note.id !== id)\r\n        });\r\n    }\r\n    currentDate(separator='-'){\r\n        let newDate = new Date()\r\n        let date = newDate.getDate();\r\n        let month = newDate.getMonth() + 1;\r\n        let year = newDate.getFullYear();\r\n        return `${month<10?`0${month}`:`${month}`}${separator}${date<10?`0${date}`:`${date}`}${separator}${year}`\r\n    }\r\n    update(id, updatedNote){\r\n        const updatedNotes = this.state.notes.map(note => {\r\n            if(note.id === id){\r\n                // return { ...recipe, ingredients: updatedRecipe };\r\n                return { ...note, note: updatedNote.note}\r\n            }\r\n            return note;\r\n        })\r\n        this.setState({notes: updatedNotes})\r\n    }\r\n    render() {\r\n        const notes = this.state.notes.map((note, index) => {\r\n            return (\r\n                <div>\r\n                    <Note id={note.id} date={this.currentDate} time={this.state.curTime} key={note.id} updateNote={this.update} content={note.note} removeNote={this.remove}/>\r\n                </div>\r\n            )\r\n        });\r\n        return (\r\n            <div className='display'>\r\n                <h1>Sticky Note Taker</h1>\r\n                <NewNoteForm createNote={this.create}/>\r\n                <div className='allNotes'>\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Display from './Display';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Display/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}